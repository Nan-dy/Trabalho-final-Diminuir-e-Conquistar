def merge_sort(arr):
    # Caso base: lista com 1 ou 0 elementos está ordenada
    if len(arr) <= 1:
        return arr

    # Dividir: encontra o meio da lista
    meio = len(arr) // 2
    esquerda = arr[:meio]
    direita = arr[meio:]

    # Conquista: aplica merge_sort recursivamente em cada metade
    esquerda = merge_sort(esquerda)
    direita = merge_sort(direita)

    # Combina: mescla as duas metades ordenadas
    return merge(esquerda, direita)

def merge(esquerda, direita):
    resultado = []
    i = j = 0

    # Percorre as duas listas e mescla em ordem
    while i < len(esquerda) and j < len(direita):
        if esquerda[i] < direita[j]:
            resultado.append(esquerda[i])
            i += 1
        else:
            resultado.append(direita[j])
            j += 1

    # Adiciona os elementos restantes (se houver) de cada lista
    resultado.extend(esquerda[i:])
    resultado.extend(direita[j:])
    return resultado

# Teste 1: Lista desordenada comum
arr = [38, 27, 43, 3, 9, 82, 10]
print("Teste 1 - Lista original:", arr)
ordenado = merge_sort(arr)
print("Teste 1 - Lista ordenada:", ordenado)

# Teste 2: Lista já ordenada
arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print("\nTeste 2 - Lista original:", arr2)
ordenado2 = merge_sort(arr2)
print("Teste 2 - Lista ordenada:", ordenado2)

# Teste 3: Lista com elementos repetidos
arr3 = [5, 3, 8, 3, 5, 2, 8, 1]
print("\nTeste 3 - Lista original:", arr3)
ordenado3 = merge_sort(arr3)
print("Teste 3 - Lista ordenada:", ordenado3)

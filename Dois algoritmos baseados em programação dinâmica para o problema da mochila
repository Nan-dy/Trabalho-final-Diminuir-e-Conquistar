def knapsack_topdown(w, v, n, W, memo=None):
    # Inicializa a tabela memo para armazenar os resultados parciais
    if memo is None:
        memo = [[-1 for _ in range(W + 1)] for _ in range(n + 1)]

    # Caso base: sem itens ou capacidade zero
    if n == 0 or W == 0:
        return 0

    # Se o resultado já foi calculado, retorna
    if memo[n][W] != -1:
        return memo[n][W]

    # Se o peso do item atual é maior que a capacidade, não podemos incluir o item
    if w[n - 1] > W:
        memo[n][W] = knapsack_topdown(w, v, n - 1, W, memo)
    else:
        # Caso 1: não incluir o item
        exclude_item = knapsack_topdown(w, v, n - 1, W, memo)
        # Caso 2: incluir o item
        include_item = v[n - 1] + knapsack_topdown(w, v, n - 1, W - w[n - 1], memo)
        # Armazena o máximo entre incluir e não incluir o item
        memo[n][W] = max(exclude_item, include_item)

    return memo[n][W]


# Testes Top-Down
print("Testes - Top-Down (Memoization):")
weights = [1, 2, 3]
values = [10, 15, 40]
print("Teste 1:", knapsack_topdown(weights, values, len(weights), 6))  # Esperado: 55

weights = [2, 3, 4, 5]
values = [3, 4, 5, 6]
print("Teste 2:", knapsack_topdown(weights, values, len(weights), 5))  # Esperado: 7

weights = [4, 5, 6]
values = [1, 2, 3]
print("Teste 3:", knapsack_topdown(weights, values, len(weights), 3))  # Esperado: 0




def knapsack_bottomup(w, v, n, W):
    # Inicializa a tabela DP com zeros
    t = [[0 for _ in range(W + 1)] for _ in range(n + 1)]

    # Preenchimento da tabela
    for i in range(1, n + 1):  # Itera sobre os itens
        for y in range(W + 1):  # Itera sobre as capacidades
            # Caso 1: não incluir o item atual
            exclude_item = t[i - 1][y]
            include_item = 0

            # Caso 2: incluir o item atual, se couber
            if w[i - 1] <= y:
                include_item = v[i - 1] + t[i - 1][y - w[i - 1]]

            # Armazena o máximo entre incluir e não incluir o item
            t[i][y] = max(exclude_item, include_item)

    return t[n][W]  # Retorna o valor máximo na célula final


# Testes Bottom-Up
print("\nTestes - Bottom-Up (Tabulação):")
weights = [1, 2, 3]
values = [10, 15, 40]
print("Teste 1:", knapsack_bottomup(weights, values, len(weights), 6))  # Esperado: 55

weights = [2, 3, 4, 5]
values = [3, 4, 5, 6]
print("Teste 2:", knapsack_bottomup(weights, values, len(weights), 5))  # Esperado: 7

weights = [4, 5, 6]
values = [1, 2, 3]
print("Teste 3:", knapsack_bottomup(weights, values, len(weights), 3))  # Esperado: 0
